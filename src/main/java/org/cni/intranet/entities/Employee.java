package org.cni.intranet.entities;

// Generated 20 nov. 2014 12:28:53 by Hibernate Tools 4.0.0

import java.io.Serializable;
import java.util.Collection;
import java.util.Date;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinColumns;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import org.hibernate.search.annotations.Analyze;
import org.hibernate.search.annotations.Field;
import org.hibernate.search.annotations.Index;
import org.hibernate.search.annotations.Indexed;
import org.hibernate.search.annotations.IndexedEmbedded;
import org.hibernate.search.annotations.Store;

/**
 * Employee generated by hbm2java
 */
@Entity
@Indexed(index="employee")
@Table(name = "employee", schema = "public")
public class Employee implements Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	
	private int employeeId;
	private User user;
	private Structure structure;
	private SubPosition subPosition;
	private Function function;
	private Grade grade;
	private String identifierType;
	private String cres;
	private String cnrps;
	private String cnss;
	private String cin;
	private String latinName;
	private String arabicName;
	private String latinFirstName;
	private String arabicFirstName;
	private String post;
	private String latinAdress;
	private String arabicAdress;
	private Boolean isResponsable;
	private Boolean isContact;
	private Date functionDate;
	private Date gradeDate;
	private Date positionDate;
	private Date subPositionDate;
	private Integer periodPosition;
	private Integer periodSubPosition;
	private String cvPath;
	private String dataTemp;
	private Collection<PhoneEmployee> phoneEmployees;
	private Collection<MailEmployee> mailEmployees;
	private Collection<User> users;
	private Collection<FaxEmployee> faxEmployees;

	public Employee() {
	}

	public Employee(String identifierType,String cres, String cnrps, String cnss, 
			String cin, String latinName, String arabicName, String latinFirstName,
			String arabicFirstName, String post, String latinAdress,
			String arabicAdress, Boolean isResponsable,Boolean isContact, Date functionDate,
			Date gradeDate, Date positionDate, Date subPositionDate,
			Integer periodPosition, Integer periodSubPosition, String cvPath,
			String dataTemp) {
		this.identifierType = identifierType;
		this.cres = cres;
		this.cnrps = cnrps;
		this.cnss = cnss;
		this.cin = cin;
		this.latinName = latinName;
		this.arabicName = arabicName;
		this.latinFirstName = latinFirstName;
		this.arabicFirstName = arabicFirstName;
		this.post = post;
		this.latinAdress = latinAdress;
		this.arabicAdress = arabicAdress;
		this.isResponsable = isResponsable;
		this.isContact = isContact;
		this.functionDate = functionDate;
		this.gradeDate = gradeDate;
		this.positionDate = positionDate;
		this.subPositionDate = subPositionDate;
		this.periodPosition = periodPosition;
		this.periodSubPosition = periodSubPosition;
		this.cvPath = cvPath;
		this.dataTemp = dataTemp;
	}

	@Id
	@GeneratedValue(strategy=GenerationType.IDENTITY)
	@Column(name = "employeeId", unique = true, nullable = false)
	public int getEmployeeId() {
		return this.employeeId;
	}

	public void setEmployeeId(int employeeId) {
		this.employeeId = employeeId;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "userId")
	public User getUser() {
		return this.user;
	}

	public void setUser(User user) {
		this.user = user;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "structureId")
	@IndexedEmbedded
	public Structure getStructure() {
		return this.structure;
	}

	public void setStructure(Structure structure) {
		this.structure = structure;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumns({
			@JoinColumn(name = "positionId", referencedColumnName = "positionId"),
			@JoinColumn(name = "subPositionId", referencedColumnName = "subPositionId") })
	public SubPosition getSubPosition() {
		return this.subPosition;
	}

	public void setSubPosition(SubPosition subPosition) {
		this.subPosition = subPosition;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "functionId")
	@IndexedEmbedded
	public Function getFunction() {
		return this.function;
	}

	public void setFunction(Function function) {
		this.function = function;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "gradeId")
	@IndexedEmbedded
	public Grade getGrade() {
		return this.grade;
	}

	public void setGrade(Grade grade) {
		this.grade = grade;
	}

	@Column(name = "identifierType", length = 254)
	public String getIdentifierType() {
		return identifierType;
	}

	public void setIdentifierType(String identifierType) {
		this.identifierType = identifierType;
	}
	
	@Column(name = "cres", length = 254)
	public String getCres() {
		return this.cres;
	}

	public void setCres(String cres) {
		this.cres = cres;
	}

	@Column(name = "cnrps", length = 254)
	public String getCnrps() {
		return this.cnrps;
	}

	public void setCnrps(String cnrps) {
		this.cnrps = cnrps;
	}

	@Column(name = "cnss", length = 254)
	public String getCnss() {
		return this.cnss;
	}

	public void setCnss(String cnss) {
		this.cnss = cnss;
	}

	@Column(name = "cin", length = 8)
	public String getCin() {
		return cin;
	}

	public void setCin(String cin) {
		this.cin = cin;
	}

	@Column(name = "latinName", length = 254)
	@Field(index=Index.YES, analyze=Analyze.YES, store=Store.YES)
	public String getLatinName() {
		return this.latinName;
	}

	public void setLatinName(String latinName) {
		this.latinName = latinName;
	}

	@Column(name = "arabicName", length = 254)
	@Field(index=Index.YES, analyze=Analyze.YES, store=Store.YES)
	public String getArabicName() {
		return this.arabicName;
	}

	public void setArabicName(String arabicName) {
		this.arabicName = arabicName;
	}
	
	@Column(name = "latinFirstName", length = 254)
	@Field(index=Index.YES, analyze=Analyze.YES, store=Store.YES)
	public String getLatinFirstName() {
		return this.latinFirstName;
	}

	public void setLatinFirstName(String latinFirstName) {
		this.latinFirstName = latinFirstName;
	}

	@Column(name = "arabicFirstName", length = 254)
	@Field(index=Index.YES, analyze=Analyze.YES, store=Store.YES)
	public String getArabicFirstName() {
		return this.arabicFirstName;
	}

	public void setArabicFirstName(String arabicFirstName) {
		this.arabicFirstName = arabicFirstName;
	}

	@Column(name = "post", length = 254)
	public String getPost() {
		return this.post;
	}

	public void setPost(String post) {
		this.post = post;
	}

	@Column(name = "latinAdress", length = 254)
	public String getLatinAdress() {
		return this.latinAdress;
	}

	public void setLatinAdress(String latinAdress) {
		this.latinAdress = latinAdress;
	}

	@Column(name = "arabicAdress", length = 254)
	public String getArabicAdress() {
		return this.arabicAdress;
	}

	public void setArabicAdress(String arabicAdress) {
		this.arabicAdress = arabicAdress;
	}

	@Column(name = "isResponsable")
	public Boolean getIsResponsable() {
		return this.isResponsable;
	}

	public void setIsResponsable(Boolean isResponsable) {
		this.isResponsable = isResponsable;
	}
	
	@Column(name = "isContact")
	public Boolean getIsContact() {
		return isContact;
	}

	public void setIsContact(Boolean isContact) {
		this.isContact = isContact;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "functionDate", length = 13)
	public Date getFunctionDate() {
		return this.functionDate;
	}

	public void setFunctionDate(Date functionDate) {
		this.functionDate = functionDate;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "gradeDate", length = 13)
	public Date getGradeDate() {
		return this.gradeDate;
	}

	public void setGradeDate(Date gradeDate) {
		this.gradeDate = gradeDate;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "positionDate", length = 13)
	public Date getPositionDate() {
		return this.positionDate;
	}

	public void setPositionDate(Date positionDate) {
		this.positionDate = positionDate;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "subPositionDate", length = 13)
	public Date getSubPositionDate() {
		return this.subPositionDate;
	}

	public void setSubPositionDate(Date subPositionDate) {
		this.subPositionDate = subPositionDate;
	}

	@Column(name = "periodPosition")
	public Integer getPeriodPosition() {
		return this.periodPosition;
	}

	public void setPeriodPosition(Integer periodPosition) {
		this.periodPosition = periodPosition;
	}

	@Column(name = "periodSubPosition")
	public Integer getPeriodSubPosition() {
		return this.periodSubPosition;
	}

	public void setPeriodSubPosition(Integer periodSubPosition) {
		this.periodSubPosition = periodSubPosition;
	}

	@Column(name = "cvPath", length = 254)
	public String getCvPath() {
		return this.cvPath;
	}

	public void setCvPath(String cvPath) {
		this.cvPath = cvPath;
	}

	@Column(name = "dataTemp", length = 254)
	public String getDataTemp() {
		return this.dataTemp;
	}

	public void setDataTemp(String dataTemp) {
		this.dataTemp = dataTemp;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "employee_phoneEmployee", schema = "public", joinColumns = { @JoinColumn(name = "employeeId", nullable = false, updatable = false) }, inverseJoinColumns = { @JoinColumn(name = "phoneEmployeeId", nullable = false, updatable = false) })
	public Collection<PhoneEmployee> getPhoneEmployees() {
		return this.phoneEmployees;
	}

	public void setPhoneEmployees(Collection<PhoneEmployee> phoneEmployees) {
		this.phoneEmployees = phoneEmployees;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "employee", cascade = CascadeType.ALL)
	public Collection<MailEmployee> getMailEmployees() {
		return this.mailEmployees;
	}

	public void setMailEmployees(Collection<MailEmployee> mailEmployees) {
		this.mailEmployees = mailEmployees;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "employee")
	public Collection<User> getUsers() {
		return this.users;
	}

	public void setUsers(Collection<User> users) {
		this.users = users;
	}

	@ManyToMany(fetch = FetchType.LAZY, cascade=CascadeType.ALL)
	@JoinTable(name = "employee_faxemployee", schema = "public", joinColumns = { @JoinColumn(name = "employeeId", nullable = false, updatable = false) }, inverseJoinColumns = { @JoinColumn(name = "faxEmployeeId", nullable = false, updatable = false) })
	public Collection<FaxEmployee> getFaxEmployees() {
		return this.faxEmployees;
	}

	public void setFaxEmployees(Collection<FaxEmployee> faxEmployees) {
		this.faxEmployees = faxEmployees;
	}

}
