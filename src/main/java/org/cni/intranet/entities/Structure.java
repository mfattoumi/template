package org.cni.intranet.entities;

// Generated 20 nov. 2014 12:28:53 by Hibernate Tools 4.0.0

import java.io.Serializable;
import java.util.Collection;
import java.util.List;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;

import org.hibernate.search.annotations.Analyze;
import org.hibernate.search.annotations.Field;
import org.hibernate.search.annotations.Index;
import org.hibernate.search.annotations.Indexed;
import org.hibernate.search.annotations.IndexedEmbedded;
import org.hibernate.search.annotations.Store;

/**
 * Structure generated by hbm2java
 */
@Entity
@Indexed(index="structure")
@Table(name = "structur", schema = "public")
public class Structure implements Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	
	private int structureId;
	private Category category;
	private SubType subType;
	private Structure structure;
	private String code;
	private String latinLongName;
	private String arabicLongName;
	private String latinShortName;
	private String acronym;
	private String keyword;
	private String dataTemp;
	private Collection<Employee> employees;
	private Collection<WebSite> webSites;
	private Collection<Local> locals;
	private Collection<SocialNetwork> socialNetworks;
	private Collection<ActivitySector> activitySectors;
	private Collection<MailStructure> mailStructures;
	private Collection<Structure> structures;
	private Collection<User> users;

	public Structure() {
	}

	public Structure(String code, String latinLongName,
			String arabicLongName, String latinShortName, String acronym,
			String keyword, String dataTemp) {
		this.code = code;
		this.latinLongName = latinLongName;
		this.arabicLongName = arabicLongName;
		this.latinShortName = latinShortName;
		this.acronym = acronym;
		this.keyword = keyword;
		this.dataTemp = dataTemp;
	}

	@Id
	@GeneratedValue(strategy=GenerationType.IDENTITY)
	@Column(name = "structureId", unique = true, nullable = false)
	public int getStructureId() {
		return this.structureId;
	}

	public void setStructureId(int structureId) {
		this.structureId = structureId;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "categoryId")
	@IndexedEmbedded
	public Category getCategory() {
		return this.category;
	}

	public void setCategory(Category category) {
		this.category = category;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "subTypeId")
	@IndexedEmbedded
	public SubType getSubType() {
		return this.subType;
	}

	public void setSubType(SubType subType) {
		this.subType = subType;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "str_structureId")
	public Structure getStructure() {
		return this.structure;
	}

	public void setStructure(Structure structure) {
		this.structure = structure;
	}
	
	
	@Column(name = "code", length = 254)
	public String getCode() {
		return this.code;
	}

	public void setCode(String code) {
		this.code = code;
	}

	@Column(name = "latinLongName", length = 254)
	@Field(index=Index.YES, analyze=Analyze.YES, store=Store.YES)
	public String getLatinLongName() {
		return this.latinLongName;
	}

	public void setLatinLongName(String latinLongName) {
		this.latinLongName = latinLongName;
	}

	@Column(name = "arabicLongName", length = 254)
	@Field(index=Index.YES, analyze=Analyze.YES, store=Store.YES)
	public String getArabicLongName() {
		return this.arabicLongName;
	}

	public void setArabicLongName(String arabicLongName) {
		this.arabicLongName = arabicLongName;
	}

	@Column(name = "latinShortName", length = 254)
	public String getLatinShortName() {
		return this.latinShortName;
	}

	public void setLatinShortName(String latinShortName) {
		this.latinShortName = latinShortName;
	}

	@Column(name = "acronym", length = 254)
	@Field(index=Index.YES, analyze=Analyze.YES, store=Store.YES)
	public String getAcronym() {
		return this.acronym;
	}

	public void setAcronym(String acronym) {
		this.acronym = acronym;
	}

	@Column(name = "keyword", length = 254)
	@Field(index=Index.YES, analyze=Analyze.YES, store=Store.YES)
	public String getKeyword() {
		return this.keyword;
	}

	public void setKeyword(String keyword) {
		this.keyword = keyword;
	}

	@Column(name = "dataTemp", length = 254)
	public String getDataTemp() {
		return this.dataTemp;
	}

	public void setDataTemp(String dataTemp) {
		this.dataTemp = dataTemp;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "structure")
	public Collection<Employee> getEmployees() {
		return this.employees;
	}

	public void setEmployees(Collection<Employee> employees) {
		this.employees = employees;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "structure_webSite", schema = "public", joinColumns = { @JoinColumn(name = "structureId", nullable = false, updatable = false) }, inverseJoinColumns = { @JoinColumn(name = "webSiteId", nullable = false, updatable = false) })
	public Collection<WebSite> getWebSites() {
		return this.webSites;
	}

	public void setWebSites(Collection<WebSite> webSites) {
		this.webSites = webSites;
	}

	
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "structure")
	@IndexedEmbedded
	public Collection<Local> getLocals() {
		return this.locals;
	}

	public void setLocals(Collection<Local> locals) {
		this.locals = locals;
	}
	

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "structure_socialNetwork", schema = "public", joinColumns = { @JoinColumn(name = "structureId", nullable = false, updatable = false) }, inverseJoinColumns = { @JoinColumn(name = "socialNetworkId", nullable = false, updatable = false) })
	public Collection<SocialNetwork> getSocialNetworks() {
		return this.socialNetworks;
	}

	public void setSocialNetworks(Collection<SocialNetwork> socialNetworks) {
		this.socialNetworks = socialNetworks;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@IndexedEmbedded
	@JoinTable(name = "structure_activitySector", schema = "public", joinColumns = { @JoinColumn(name = "structureId", nullable = false, updatable = false) }, inverseJoinColumns = { @JoinColumn(name = "activitySectorId", nullable = false, updatable = false) })
	public Collection<ActivitySector> getActivitySectors() {
		return this.activitySectors;
	}

	public void setActivitySectors(Collection<ActivitySector> activitySectors) {
		this.activitySectors = activitySectors;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "structure_mailStructure", schema = "public", joinColumns = { @JoinColumn(name = "structureId", nullable = false, updatable = false) }, inverseJoinColumns = { @JoinColumn(name = "mailStructureId", nullable = false, updatable = false) })
	public Collection<MailStructure> getMailStructures() {
		return this.mailStructures;
	}

	public void setMailStructures(Collection<MailStructure> mailStructures) {
		this.mailStructures = mailStructures;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "structure")
	public Collection<Structure> getStructures() {
		return this.structures;
	}

	public void setStructures(Collection<Structure> structures) {
		this.structures = structures;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "user_structure", schema = "public", joinColumns = { @JoinColumn(name = "structureId", nullable = false, updatable = false) }, inverseJoinColumns = { @JoinColumn(name = "userId", nullable = false, updatable = false) })
	public Collection<User> getUsers() {
		return this.users;
	}

	public void setUsers(Collection<User> users) {
		this.users = users;
	}

}
